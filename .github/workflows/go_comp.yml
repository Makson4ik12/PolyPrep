name: Go Security Analysis with Vulnerabilities

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.9'

      - name: Install tools
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          pip install pandas openpyxl

      - name: Run vulnerability scan
        continue-on-error: true
        run: |
          cd backend/core
          mkdir -p analysis_results
          
          # Запускаем сканирование уязвимостей
          govulncheck -json ./... > analysis_results/vulns.json 2>analysis_results/vulns.log || true
          
          # Запускаем security scan
          gosec -fmt=json -out=analysis_results/gosec.json ./... 2>analysis_results/gosec.log || true

      - name: Generate report
        run: |
          cd backend/core
          
          python3 <<EOF
          import pandas as pd
          import json
          from datetime import datetime
          
          def safe_read_json(path):
              try:
                  with open(path) as f:
                      return json.load(f)
              except:
                  return None
          
          # Создаем Excel writer с корректными параметрами
          with pd.ExcelWriter('security_report.xlsx', engine='openpyxl') as writer:
              # Метаданные
              pd.DataFrame({
                  'Report': ['Go Security Analysis'],
                  'Date': [datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
                  'Project': ['PolyPrep/backend/core']
              }).to_excel(writer, sheet_name='Metadata', index=False)
              
              # Обработка уязвимостей
              vulns_data = safe_read_json('analysis_results/vulns.json') or {}
              if vulns_data.get('Vulns'):
                  vulns_list = []
                  for vuln in vulns_data['Vulns']:
                      vulns_list.append({
                          'ID': vuln.get('OSV', {}).get('id', ''),
                          'CVE': ', '.join(vuln.get('OSV', {}).get('aliases', [])),
                          'Summary': vuln.get('OSV', {}).get('summary', ''),
                          'Severity': vuln.get('OSV', {}).get('severity', [{}])[0].get('score', 'N/A'),
                          'Affected Version': next(
                              (e['fixed'] for e in vuln.get('OSV', {}).get('affected', [{}])[0]
                              .get('ranges', [{}])[0].get('events', [])
                              if e.get('fixed') else 'N/A', 'N/A'),
                          'Fixed Version': next(
                              (e['fixed'] for e in vuln.get('OSV', {}).get('affected', [{}])[0]
                              .get('ranges', [{}])[0].get('events', [])
                              if e.get('fixed') else 'N/A', 'N/A'),
                          'Package': vuln.get('PkgPath', ''),
                          'Details': vuln.get('OSV', {}).get('details', '')[:500] + '...' if vuln.get('OSV', {}).get('details') else ''
                      })
                  vulns_df = pd.DataFrame(vulns_list)
                  vulns_df.to_excel(writer, sheet_name='Vulnerabilities', index=False)
              else:
                  pd.DataFrame({'Status': ['No vulnerabilities found']}).to_excel(
                      writer, sheet_name='Vulnerabilities', index=False)
              
              # Обработка security issues
              gosec_data = safe_read_json('analysis_results/gosec.json') or {}
              if gosec_data.get('Issues'):
                  issues_df = pd.json_normalize(gosec_data['Issues'])
                  issues_df.to_excel(writer, sheet_name='Security Issues', index=False)
              else:
                  pd.DataFrame({'Status': ['No security issues found']}).to_excel(
                      writer, sheet_name='Security Issues', index=False)
          
          # Проверяем целостность файла
          try:
              pd.read_excel('security_report.xlsx', sheet_name=None)
              print("Excel file created successfully")
          except Exception as e:
              print(f"Error verifying Excel file: {str(e)}")
              exit(1)
          EOF

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: backend/core/security_report.xlsx

      - name: Upload raw data
        uses: actions/upload-artifact@v4
        with:
          name: analysis-raw-data
          path: backend/core/analysis_results/*
