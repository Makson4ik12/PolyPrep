name: Go Security Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go 1.23
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.9'

      - name: Install Python for reporting
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Prepare environment
        run: |
          cd backend/core
          go mod download
          pip install pandas openpyxl

      - name: Run security analysis
        id: analysis
        continue-on-error: true
        run: |
          cd backend/core
          
          # Install analysis tools
          go install github.com/securego/gosec/v2/cmd/gosec@v2.22.3
          go install honnef.co/go/tools/cmd/staticcheck@v0.6.1
          go install golang.org/x/vuln/cmd/govulncheck@v1.1.4
          
          # Run analyses with JSON output
          gosec -fmt=json -out=gosec.json ./... 2>&1 || echo "{}" > gosec.json
          staticcheck -f=json ./... > staticcheck.json 2>&1 || echo "[]" > staticcheck.json
          govulncheck -json ./... > govulncheck.json 2>&1 || echo '{"Vulns":[]}' > govulncheck.json
          
          # Generate Excel report
          python3 <<EOF
          import pandas as pd
          import json
          
          def safe_json_load(file):
              try:
                  with open(file) as f:
                      return json.load(f)
              except:
                  return None
          
          writer = pd.ExcelWriter('security_report.xlsx', engine='openpyxl')
          
          # Gosec results
          gosec_data = safe_json_load('gosec.json') or {}
          gosec_issues = gosec_data.get('Issues', [])
          if gosec_issues:
              pd.json_normalize(gosec_issues).to_excel(writer, sheet_name='Security Issues', index=False)
          else:
              pd.DataFrame({'Status': ['No security issues found']}).to_excel(writer, sheet_name='Security Issues', index=False)
          
          # Staticcheck results
          static_data = []
          try:
              with open('staticcheck.json') as f:
                  static_data = [json.loads(line) for line in f if line.strip()]
          except:
              pass
          
          if static_data:
              pd.json_normalize(static_data).to_excel(writer, sheet_name='Static Analysis', index=False)
          else:
              pd.DataFrame({'Status': ['No static analysis issues found']}).to_excel(writer, sheet_name='Static Analysis', index=False)
          
          # Vulncheck results
          vuln_data = safe_json_load('govulncheck.json') or {'Vulns': []}
          if vuln_data['Vulns']:
              pd.json_normalize(vuln_data['Vulns']).to_excel(writer, sheet_name='Vulnerabilities', index=False)
          else:
              pd.DataFrame({'Status': ['No vulnerabilities found']}).to_excel(writer, sheet_name='Vulnerabilities', index=False)
          
          writer.close()
          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-report
          path: backend/core/security_report.xlsx
