name: Enhanced Go Security Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.9'

      - name: Install Python dependencies
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Prepare environment
        run: |
          cd backend/core
          go mod download
          pip install pandas openpyxl

      - name: Run enhanced analysis
        continue-on-error: true
        run: |
          cd backend/core
          
          # Get tool versions
          echo "gosec version: $(gosec -version)" > versions.txt
          echo "staticcheck version: $(staticcheck -version)" >> versions.txt
          echo "govulncheck version: $(govulncheck -version)" >> versions.txt
          
          # Run analyses with extended info
          gosec -fmt=json -exclude-generated -out=gosec.json ./... 2>&1 || echo '{"Issues":[],"Stats":{"files":0,"lines":0,"nosec":0,"found":0}}' > gosec.json
          staticcheck -f=json -tests=false ./... > staticcheck.json 2>&1 || echo '[]' > staticcheck.json
          govulncheck -json ./... > govulncheck.json 2>&1 || echo '{"Vulns":[],"Config":{"scan_level":0}}' > govulncheck.json
          
          # Generate detailed Excel report
          python3 <<EOF
          import pandas as pd
          import json
          from datetime import datetime
          
          def safe_json_load(file):
              try:
                  with open(file) as f:
                      return json.load(f)
              except:
                  return None
          
          writer = pd.ExcelWriter('enhanced_security_report.xlsx', engine='openpyxl')
          
          # Metadata sheet
          metadata = {
              'Report Date': [datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
              'Project': ['PolyPrep/backend/core'],
              'Scan Scope': ['All .go files']
          }
          
          with open('versions.txt') as f:
              for line in f:
                  if ':' in line:
                      key, val = line.strip().split(':', 1)
                      metadata[key.strip()] = [val.strip()]
          
          pd.DataFrame(metadata).to_excel(writer, sheet_name='Metadata', index=False)
          
          # Gosec results with stats
          gosec_data = safe_json_load('gosec.json') or {'Issues': [], 'Stats': {}}
          if gosec_data['Issues']:
              pd.json_normalize(gosec_data['Issues']).to_excel(writer, sheet_name='Security Issues', index=False)
          else:
              stats = gosec_data.get('Stats', {})
              pd.DataFrame({
                  'Status': ['No security issues found'],
                  'Files Scanned': [stats.get('files', 0)],
                  'Lines Scanned': [stats.get('lines', 0)]
              }).to_excel(writer, sheet_name='Security Issues', index=False)
          
          # Staticcheck with package info
          static_data = []
          try:
              with open('staticcheck.json') as f:
                  static_data = [json.loads(line) for line in f if line.strip()]
          except:
              pass
          
          if static_data:
              df = pd.json_normalize(static_data)
              # Add severity column based on severity level
              df['Severity'] = df['severity'].map({'error': 'High', 'warning': 'Medium'})
              df.to_excel(writer, sheet_name='Static Analysis', index=False)
          else:
              pd.DataFrame({
                  'Status': ['No static analysis issues found'],
                  'Note': ['Checked all .go files excluding tests']
              }).to_excel(writer, sheet_name='Static Analysis', index=False)
          
          # Vulncheck with module info
          vuln_data = safe_json_load('govulncheck.json') or {'Vulns': []}
          if vuln_data['Vulns']:
              df = pd.json_normalize(vuln_data['Vulns'])
              # Extract module info
              df['Module'] = df['module_path'] + '@' + df['found_version']
              df.to_excel(writer, sheet_name='Vulnerabilities', index=False)
          else:
              pd.DataFrame({
                  'Status': ['No known vulnerabilities found'],
                  'Note': ['Scanned all direct and indirect dependencies']
              }).to_excel(writer, sheet_name='Vulnerabilities', index=False)
          
          writer.close()
          EOF

      - name: Upload enhanced report
        uses: actions/upload-artifact@v4
        with:
          name: enhanced-security-report
          path: backend/core/enhanced_security_report.xlsx
