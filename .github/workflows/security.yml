name: Fixed Go Security Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.9'

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Prepare environment
        run: |
          # Переходим в директорию проекта
          cd backend/core
          
          # Инициализируем модуль, если нужно
          if [ ! -f go.mod ]; then
            go mod init github.com/Makson4ik12/PolyPrep/backend/core
          fi
          
          # Скачиваем зависимости
          go mod tidy
          
          # Устанавливаем инструменты анализа
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          
          # Устанавливаем Python-зависимости
          pip install pandas openpyxl

      - name: Run analysis
        continue-on-error: true
        run: |
          cd backend/core
          
          # Создаем временную директорию для результатов
          mkdir -p analysis_results
          
          # Запускаем анализаторы
          gosec -fmt=json -out=analysis_results/gosec.json ./... || echo "{}" > analysis_results/gosec.json
          staticcheck -f=json ./... > analysis_results/staticcheck.json || echo "[]" > analysis_results/staticcheck.json
          govulncheck -json ./... > analysis_results/govulncheck.json || echo '{"Vulns":[]}' > analysis_results/govulncheck.json
          
          # Создаем простой отчет
          python3 <<EOF
          import pandas as pd
          import json
          import os
          
          # Создаем Excel-файл
          with pd.ExcelWriter('security_report.xlsx', engine='openpyxl') as writer:
              # Лист с метаданными
              pd.DataFrame({
                  'Report': ['Go Security Analysis'],
                  'Date': [pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')],
                  'Go Version': ['1.23.9'],
                  'Files Scanned': [len([f for f in os.listdir('.') if f.endswith('.go')])]
              }).to_excel(writer, sheet_name='Metadata', index=False)
              
              # Обрабатываем результаты gosec
              try:
                  with open('analysis_results/gosec.json') as f:
                      gosec_data = json.load(f)
                  if 'Issues' in gosec_data and gosec_data['Issues']:
                      pd.json_normalize(gosec_data['Issues']).to_excel(writer, sheet_name='Security Issues', index=False)
                  else:
                      pd.DataFrame({'Result': ['No security issues found']}).to_excel(writer, sheet_name='Security Issues', index=False)
              except:
                  pd.DataFrame({'Error': ['Could not process gosec results']}).to_excel(writer, sheet_name='Security Issues', index=False)
              
              # Обрабатываем staticcheck
              try:
                  with open('analysis_results/staticcheck.json') as f:
                      static_data = [json.loads(line) for line in f if line.strip()]
                  if static_data:
                      pd.json_normalize(static_data).to_excel(writer, sheet_name='Static Analysis', index=False)
                  else:
                      pd.DataFrame({'Result': ['No static analysis issues found']}).to_excel(writer, sheet_name='Static Analysis', index=False)
              except:
                  pd.DataFrame({'Error': ['Could not process staticcheck results']}).to_excel(writer, sheet_name='Static Analysis', index=False)
              
              # Обрабатываем govulncheck
              try:
                  with open('analysis_results/govulncheck.json') as f:
                      vuln_data = json.load(f)
                  if 'Vulns' in vuln_data and vuln_data['Vulns']:
                      pd.json_normalize(vuln_data['Vulns']).to_excel(writer, sheet_name='Vulnerabilities', index=False)
                  else:
                      pd.DataFrame({'Result': ['No vulnerabilities found']}).to_excel(writer, sheet_name='Vulnerabilities', index=False)
              except:
                  pd.DataFrame({'Error': ['Could not process govulncheck results']}).to_excel(writer, sheet_name='Vulnerabilities', index=False)
          EOF

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: backend/core/security_report.xlsx
