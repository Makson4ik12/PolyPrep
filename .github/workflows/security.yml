name: Optimized Go Security Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.9'

      - name: Verify project structure
        id: structure
        run: |
          cd backend/core
          echo "Go files found: $(find . -name '*.go' | wc -l)" > files_count.txt
          echo "count=$(find . -name '*.go' | wc -l)" >> $GITHUB_OUTPUT

      - name: Initialize Go module
        if: steps.structure.outputs.count != '0'
        run: |
          cd backend/core
          [ -f go.mod ] || go mod init github.com/Makson4ik12/PolyPrep
          go mod tidy

      - name: Install analysis tools
        if: steps.structure.outputs.count != '0'
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@v2.22.3
          go install honnef.co/go/tools/cmd/staticcheck@v0.6.1
          go install golang.org/x/vuln/cmd/govulncheck@v1.1.4

      - name: Run security analysis
        if: steps.structure.outputs.count != '0'
        continue-on-error: true
        run: |
          cd backend/core
          mkdir -p analysis_results
          
          # Run gosec with JSON output
          gosec -fmt=json -out=analysis_results/gosec.json ./... 2>analysis_results/gosec.log || true
          
          # Run staticcheck without -v flag
          staticcheck -f=json ./... > analysis_results/staticcheck.json 2>analysis_results/staticcheck.log || true
          
          # Run govulncheck
          govulncheck -json ./... > analysis_results/govulncheck.json 2>analysis_results/govulncheck.log || true

      - name: Generate report
        if: steps.structure.outputs.count != '0'
        run: |
          cd backend/core
          pip install pandas openpyxl
          
          python3 <<EOF
          import pandas as pd
          import json
          import os
          
          def safe_json_load(path):
              try:
                  with open(path) as f:
                      return json.load(f)
              except:
                  return None
          
          with pd.ExcelWriter('security_report.xlsx', engine='openpyxl') as writer:
              # Metadata sheet
              meta = {
                  'Project': ['PolyPrep/backend/core'],
                  'Date': [pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')],
                  'Files Scanned': [int(os.popen('find . -name "*.go" | wc -l').read())]
              }
              pd.DataFrame(meta).to_excel(writer, sheet_name='Metadata', index=False)
              
              # Gosec results
              gosec_data = safe_json_load('analysis_results/gosec.json') or {'Issues': []}
              if gosec_data['Issues']:
                  pd.json_normalize(gosec_data['Issues']).to_excel(writer, sheet_name='Security Issues', index=False)
              else:
                  pd.DataFrame({'Status': ['No security issues found']}).to_excel(writer, sheet_name='Security Issues', index=False)
              
              # Staticcheck results
              static_data = []
              try:
                  with open('analysis_results/staticcheck.json') as f:
                      static_data = [json.loads(line) for line in f if line.strip()]
              except:
                  pass
              
              if static_data:
                  pd.json_normalize(static_data).to_excel(writer, sheet_name='Static Analysis', index=False)
              else:
                  pd.DataFrame({'Status': ['No static analysis issues found']}).to_excel(writer, sheet_name='Static Analysis', index=False)
              
              # Govulncheck results
              vuln_data = safe_json_load('analysis_results/govulncheck.json') or {'Vulns': []}
              if vuln_data['Vulns']:
                  pd.json_normalize(vuln_data['Vulns']).to_excel(writer, sheet_name='Vulnerabilities', index=False)
              else:
                  pd.DataFrame({'Status': ['No vulnerabilities found']}).to_excel(writer, sheet_name='Vulnerabilities', index=False)
          EOF

      - name: Upload report
        if: steps.structure.outputs.count != '0'
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: backend/core/security_report.xlsx

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analysis-logs
          path: backend/core/analysis_results/*.log

      - name: No Go files found
        if: steps.structure.outputs.count == '0'
        run: |
          echo "##[error]No Go files found in backend/core!"
          exit 1
