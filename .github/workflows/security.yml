name: Reliable Go Security Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.9'

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Prepare environment
        run: |
          cd backend/core
          go mod download
          pip install pandas openpyxl

      - name: Run analysis and generate report
        id: analysis
        continue-on-error: true
        run: |
          cd backend/core
          
          # Create timestamp
          echo "Report generated: $(date)" > report_info.txt
          
          # Run tools and capture output
          gosec -fmt=json -exclude-generated ./... > gosec.json 2>&1 || echo "Gosec scan completed with exit code $?" > gosec_status.txt
          staticcheck -f=json ./... > staticcheck.json 2>&1 || echo "Staticcheck scan completed with exit code $?" > staticcheck_status.txt
          govulncheck -json ./... > govulncheck.json 2>&1 || echo "Govulncheck scan completed with exit code $?" > govulncheck_status.txt
          
          # Count Go files for metrics
          echo "Files scanned: $(find . -name '*.go' | wc -l)" >> report_info.txt
          
          # Generate Excel report
          python3 <<EOF
          import pandas as pd
          import json
          import os
          
          def create_sheet(writer, name, data, columns=None):
              if isinstance(data, list) and data:
                  df = pd.DataFrame(data, columns=columns) if columns else pd.json_normalize(data)
                  df.to_excel(writer, sheet_name=name, index=False)
              else:
                  status = "No issues found" if not isinstance(data, str) else data
                  pd.DataFrame({'Result': [status]}).to_excel(writer, sheet_name=name, index=False)
          
          with pd.ExcelWriter('go_analysis_report.xlsx', engine='openpyxl') as writer:
              # Summary sheet
              summary = []
              with open('report_info.txt') as f:
                  summary = [line.strip() for line in f if line.strip()]
              
              tool_status = []
              for tool in ['gosec', 'staticcheck', 'govulncheck']:
                  status_file = f'{tool}_status.txt'
                  if os.path.exists(status_file):
                      with open(status_file) as f:
                          tool_status.append(f"{tool}: {f.read().strip()}")
              
              pd.DataFrame({
                  'Info': summary + tool_status
              }).to_excel(writer, sheet_name='Summary', index=False)
              
              # Gosec results
              try:
                  with open('gosec.json') as f:
                      gosec_data = json.load(f)
                  create_sheet(writer, 'Security Issues', gosec_data.get('Issues', []))
              except:
                  create_sheet(writer, 'Security Issues', "Could not parse gosec results")
              
              # Staticcheck results
              try:
                  static_data = []
                  if os.path.exists('staticcheck.json'):
                      with open('staticcheck.json') as f:
                          static_data = [json.loads(line) for line in f if line.strip()]
                  create_sheet(writer, 'Static Analysis', static_data)
              except:
                  create_sheet(writer, 'Static Analysis', "Could not parse staticcheck results")
              
              # Govulncheck results
              try:
                  with open('govulncheck.json') as f:
                      vuln_data = json.load(f)
                  create_sheet(writer, 'Vulnerabilities', vuln_data.get('Vulns', []))
              except:
                  create_sheet(writer, 'Vulnerabilities', "Could not parse govulncheck results")
          EOF

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: go-analysis-report
          path: backend/core/go_analysis_report.xlsx
