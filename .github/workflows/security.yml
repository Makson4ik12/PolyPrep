name: Go Compositional Analysis 

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Python for Excel generation
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Prepare Go environment
        run: |
          cd backend/core
          go mod tidy

      - name: Run analyses and generate reports
        run: |
          cd backend/core
          
          # Install analysis tools
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          
          # Run analyses and save to JSON
          gosec -fmt=json -out=gosec.json ./...
          staticcheck -f=json ./... > staticcheck.json
          govulncheck -json ./... > govulncheck.json
          
          # Install Python dependencies
          pip install pandas openpyxl
          
          # Create Excel report
          python3 <<EOF
          import pandas as pd
          import json
          
          # Create Excel writer
          writer = pd.ExcelWriter('analysis_report.xlsx', engine='openpyxl')
          
          # Process gosec results
          try:
              with open('gosec.json') as f:
                  gosec_data = json.load(f)
              df_gosec = pd.json_normalize(gosec_data['Issues'])
              df_gosec.to_excel(writer, sheet_name='Security Issues', index=False)
          except Exception as e:
              pd.DataFrame({'Error': [str(e)]}).to_excel(writer, sheet_name='Gosec Errors', index=False)
          
          # Process staticcheck results
          try:
              with open('staticcheck.json') as f:
                  static_data = [json.loads(line) for line in f]
              df_static = pd.json_normalize(static_data)
              df_static.to_excel(writer, sheet_name='Static Analysis', index=False)
          except Exception as e:
              pd.DataFrame({'Error': [str(e)]}).to_excel(writer, sheet_name='StaticCheck Errors', index=False)
          
          # Process govulncheck results
          try:
              with open('govulncheck.json') as f:
                  vuln_data = json.load(f)
              df_vuln = pd.json_normalize(vuln_data['Vulns'])
              df_vuln.to_excel(writer, sheet_name='Vulnerabilities', index=False)
          except Exception as e:
              pd.DataFrame({'Error': [str(e)]}).to_excel(writer, sheet_name='VulnCheck Errors', index=False)
          
          writer.close()
          EOF

      - name: Upload Excel report
        uses: actions/upload-artifact@v4
        with:
          name: analysis-excel-report
          path: backend/core/analysis_report.xlsx
